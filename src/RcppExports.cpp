// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "lazyNumbers_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// intervals_lvx
Rcpp::NumericMatrix intervals_lvx(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_intervals_lvx(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(intervals_lvx(lvx));
    return rcpp_result_gen;
END_RCPP
}
// nv2lvx
lazyVectorXPtr nv2lvx(Rcpp::NumericVector nv);
RcppExport SEXP _lazyNumbers_nv2lvx(SEXP nvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nv(nvSEXP);
    rcpp_result_gen = Rcpp::wrap(nv2lvx(nv));
    return rcpp_result_gen;
END_RCPP
}
// nm2lmx
lazyMatrixXPtr nm2lmx(Rcpp::NumericMatrix nm);
RcppExport SEXP _lazyNumbers_nm2lmx(SEXP nmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nm(nmSEXP);
    rcpp_result_gen = Rcpp::wrap(nm2lmx(nm));
    return rcpp_result_gen;
END_RCPP
}
// lvx2nv
Rcpp::NumericVector lvx2nv(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lvx2nv(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lvx2nv(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lmx2nm
Rcpp::NumericMatrix lmx2nm(lazyMatrixXPtr lmx);
RcppExport SEXP _lazyNumbers_lmx2nm(SEXP lmxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx(lmxSEXP);
    rcpp_result_gen = Rcpp::wrap(lmx2nm(lmx));
    return rcpp_result_gen;
END_RCPP
}
// minus_lvx
lazyVectorXPtr minus_lvx(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_minus_lvx(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(minus_lvx(lvx));
    return rcpp_result_gen;
END_RCPP
}
// minus_lmx
lazyMatrixXPtr minus_lmx(lazyMatrixXPtr lmx);
RcppExport SEXP _lazyNumbers_minus_lmx(SEXP lmxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx(lmxSEXP);
    rcpp_result_gen = Rcpp::wrap(minus_lmx(lmx));
    return rcpp_result_gen;
END_RCPP
}
// lvx_plus_lvx
lazyVectorXPtr lvx_plus_lvx(lazyVectorXPtr lvx1, lazyVectorXPtr lvx2);
RcppExport SEXP _lazyNumbers_lvx_plus_lvx(SEXP lvx1SEXP, SEXP lvx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx1(lvx1SEXP);
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx2(lvx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lvx_plus_lvx(lvx1, lvx2));
    return rcpp_result_gen;
END_RCPP
}
// lmx_plus_lmx
lazyMatrixXPtr lmx_plus_lmx(lazyMatrixXPtr lmx1, lazyMatrixXPtr lmx2);
RcppExport SEXP _lazyNumbers_lmx_plus_lmx(SEXP lmx1SEXP, SEXP lmx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx1(lmx1SEXP);
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx2(lmx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lmx_plus_lmx(lmx1, lmx2));
    return rcpp_result_gen;
END_RCPP
}
// lvx_minus_lvx
lazyVectorXPtr lvx_minus_lvx(lazyVectorXPtr lvx1, lazyVectorXPtr lvx2);
RcppExport SEXP _lazyNumbers_lvx_minus_lvx(SEXP lvx1SEXP, SEXP lvx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx1(lvx1SEXP);
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx2(lvx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lvx_minus_lvx(lvx1, lvx2));
    return rcpp_result_gen;
END_RCPP
}
// lmx_minus_lmx
lazyMatrixXPtr lmx_minus_lmx(lazyMatrixXPtr lmx1, lazyMatrixXPtr lmx2);
RcppExport SEXP _lazyNumbers_lmx_minus_lmx(SEXP lmx1SEXP, SEXP lmx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx1(lmx1SEXP);
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx2(lmx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lmx_minus_lmx(lmx1, lmx2));
    return rcpp_result_gen;
END_RCPP
}
// lvx_times_lvx
lazyVectorXPtr lvx_times_lvx(lazyVectorXPtr lvx1, lazyVectorXPtr lvx2);
RcppExport SEXP _lazyNumbers_lvx_times_lvx(SEXP lvx1SEXP, SEXP lvx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx1(lvx1SEXP);
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx2(lvx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lvx_times_lvx(lvx1, lvx2));
    return rcpp_result_gen;
END_RCPP
}
// lmx_cwtimes_lmx
lazyMatrixXPtr lmx_cwtimes_lmx(lazyMatrixXPtr lmx1, lazyMatrixXPtr lmx2);
RcppExport SEXP _lazyNumbers_lmx_cwtimes_lmx(SEXP lmx1SEXP, SEXP lmx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx1(lmx1SEXP);
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx2(lmx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lmx_cwtimes_lmx(lmx1, lmx2));
    return rcpp_result_gen;
END_RCPP
}
// lmx_times_lmx
lazyMatrixXPtr lmx_times_lmx(lazyMatrixXPtr lmx1, lazyMatrixXPtr lmx2);
RcppExport SEXP _lazyNumbers_lmx_times_lmx(SEXP lmx1SEXP, SEXP lmx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx1(lmx1SEXP);
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx2(lmx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lmx_times_lmx(lmx1, lmx2));
    return rcpp_result_gen;
END_RCPP
}
// lvx_dividedby_lvx
lazyVectorXPtr lvx_dividedby_lvx(lazyVectorXPtr lvx1, lazyVectorXPtr lvx2);
RcppExport SEXP _lazyNumbers_lvx_dividedby_lvx(SEXP lvx1SEXP, SEXP lvx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx1(lvx1SEXP);
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx2(lvx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lvx_dividedby_lvx(lvx1, lvx2));
    return rcpp_result_gen;
END_RCPP
}
// lmx_dividedby_lmx
lazyMatrixXPtr lmx_dividedby_lmx(lazyMatrixXPtr lmx1, lazyMatrixXPtr lmx2);
RcppExport SEXP _lazyNumbers_lmx_dividedby_lmx(SEXP lmx1SEXP, SEXP lmx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx1(lmx1SEXP);
    Rcpp::traits::input_parameter< lazyMatrixXPtr >::type lmx2(lmx2SEXP);
    rcpp_result_gen = Rcpp::wrap(lmx_dividedby_lmx(lmx1, lmx2));
    return rcpp_result_gen;
END_RCPP
}
// lazySum
lazyVectorXPtr lazySum(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazySum(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazySum(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyProd
lazyVectorXPtr lazyProd(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyProd(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyProd(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyCumsum
lazyVectorXPtr lazyCumsum(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyCumsum(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyCumsum(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyCumprod
lazyVectorXPtr lazyCumprod(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyCumprod(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyCumprod(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyMax
lazyVectorXPtr lazyMax(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyMax(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyMax(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyMin
lazyVectorXPtr lazyMin(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyMin(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyMin(lvx));
    return rcpp_result_gen;
END_RCPP
}
// lazyRange
lazyVectorXPtr lazyRange(lazyVectorXPtr lvx);
RcppExport SEXP _lazyNumbers_lazyRange(SEXP lvxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lazyVectorXPtr >::type lvx(lvxSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyRange(lvx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lazyNumbers_intervals_lvx", (DL_FUNC) &_lazyNumbers_intervals_lvx, 1},
    {"_lazyNumbers_nv2lvx", (DL_FUNC) &_lazyNumbers_nv2lvx, 1},
    {"_lazyNumbers_nm2lmx", (DL_FUNC) &_lazyNumbers_nm2lmx, 1},
    {"_lazyNumbers_lvx2nv", (DL_FUNC) &_lazyNumbers_lvx2nv, 1},
    {"_lazyNumbers_lmx2nm", (DL_FUNC) &_lazyNumbers_lmx2nm, 1},
    {"_lazyNumbers_minus_lvx", (DL_FUNC) &_lazyNumbers_minus_lvx, 1},
    {"_lazyNumbers_minus_lmx", (DL_FUNC) &_lazyNumbers_minus_lmx, 1},
    {"_lazyNumbers_lvx_plus_lvx", (DL_FUNC) &_lazyNumbers_lvx_plus_lvx, 2},
    {"_lazyNumbers_lmx_plus_lmx", (DL_FUNC) &_lazyNumbers_lmx_plus_lmx, 2},
    {"_lazyNumbers_lvx_minus_lvx", (DL_FUNC) &_lazyNumbers_lvx_minus_lvx, 2},
    {"_lazyNumbers_lmx_minus_lmx", (DL_FUNC) &_lazyNumbers_lmx_minus_lmx, 2},
    {"_lazyNumbers_lvx_times_lvx", (DL_FUNC) &_lazyNumbers_lvx_times_lvx, 2},
    {"_lazyNumbers_lmx_cwtimes_lmx", (DL_FUNC) &_lazyNumbers_lmx_cwtimes_lmx, 2},
    {"_lazyNumbers_lmx_times_lmx", (DL_FUNC) &_lazyNumbers_lmx_times_lmx, 2},
    {"_lazyNumbers_lvx_dividedby_lvx", (DL_FUNC) &_lazyNumbers_lvx_dividedby_lvx, 2},
    {"_lazyNumbers_lmx_dividedby_lmx", (DL_FUNC) &_lazyNumbers_lmx_dividedby_lmx, 2},
    {"_lazyNumbers_lazySum", (DL_FUNC) &_lazyNumbers_lazySum, 1},
    {"_lazyNumbers_lazyProd", (DL_FUNC) &_lazyNumbers_lazyProd, 1},
    {"_lazyNumbers_lazyCumsum", (DL_FUNC) &_lazyNumbers_lazyCumsum, 1},
    {"_lazyNumbers_lazyCumprod", (DL_FUNC) &_lazyNumbers_lazyCumprod, 1},
    {"_lazyNumbers_lazyMax", (DL_FUNC) &_lazyNumbers_lazyMax, 1},
    {"_lazyNumbers_lazyMin", (DL_FUNC) &_lazyNumbers_lazyMin, 1},
    {"_lazyNumbers_lazyRange", (DL_FUNC) &_lazyNumbers_lazyRange, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_lazyNumbers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
